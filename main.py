import os
import random
from datetime import timedelta

import telebot
from dotenv import load_dotenv
from telebot import types

import buttons
import database
from database import *

load_dotenv()
bot = telebot.TeleBot(token=os.getenv('TOKEN'), parse_mode='HTML', disable_web_page_preview=True)
name_bot = '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞'


@bot.message_handler(commands=['start'])
def start(message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –±–æ—Ç"""
    user_id = message.from_user.id
    if message.text.startswith('/start '):
        referrer = message.text.split(' ')[1]
        if int(referrer) == user_id:
            bot.send_message(user_id, f'<b>‚ùï–°–∞–º–æ–≥–æ —Å–µ–±—è —Ä–µ—Ñ–µ—Ä–∞–ª–∏—Ç—å –Ω–µ–ª—å–∑—è</b>', reply_markup=buttons.main_menu())
        else:
            if check_user(user_id):
                bot.send_message(user_id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=buttons.main_menu())
            else:
                new_user(referrer, user_id)
                bot.send_message(referrer, f'<b>–£ –í–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª: @{message.from_user.username}</b>',
                                 reply_markup=buttons.main_menu())
                bot.send_message(user_id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=buttons.main_menu())
                add_ref_balance(referrer)
    else:
        if check_user(user_id):
            bot.send_message(user_id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=buttons.main_menu())
        else:
            new_user(0, user_id)
            bot.send_message(user_id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=buttons.main_menu())


@bot.callback_query_handler(func=lambda call: call.data in ['help', 'profile', 'bonus'])
def call_handler(call):
    """–ü–û–õ–£–ß–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø –ü–û–ú–û–©–ò –ë–û–ù–£–°–ê"""
    user_id = call.message.chat.id

    if call.data == 'profile':
        bot.answer_callback_query(call.id)

        if check_user(user_id):
            balance, refs = get_info(user_id)
            if balance is not None and refs is not None:
                markup = types.InlineKeyboardMarkup()
                invite_link = types.InlineKeyboardButton(text='üîó–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è',
                                                         switch_inline_query=f'https://t.me/{name_bot}?start={user_id}')
                markup.add(invite_link)

                bot.send_message(
                    user_id,
                    f'<b>üë§–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n' +
                    f'<i>üë•–¢—ã –ø—Ä–∏–≤–µ–ª: {refs} –¥—Ä—É–∑–µ–π\n' +
                    f'üí∞–ë–∞–ª–∞–Ω—Å: {balance} NOT\n\n</i>' +
                    f'–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: https://t.me/{name_bot}?start={user_id}',
                    reply_markup=markup
                )
            else:
                bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")
        else:
            new_user(0, user_id)  # Register user if not found
            bot.send_message(user_id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=buttons.main_menu())

    elif call.data == 'help':
        bot.answer_callback_query(call.id)
        bot.send_message(
            user_id,
            '<a href="https://t.me/UZ_ELEGANT"><b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞‚ùì</b></a>',
            reply_markup=buttons.main_menu()
        )
    elif call.data == 'bonus':
        bot.answer_callback_query(call.id)

        if bonusAccess(user_id):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å
            bonus = random.randint(1, 100)
            if database.add_bonus(bonus, user_id):
                bot.send_sticker(user_id, 'CAACAgIAAxkBAAEM7lBnBAjssgQeD689YI39d4jlkhWIPQACiA0AArvroUsJnEE_AtcneDYE')
                bot.send_message(user_id, f'<b>üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å: {bonus} –†–£–ë!</b>')
            else:
                bot.send_message(user_id, '<b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞.</b>')
        else:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ–Ω—É—Å–∞
            with sqlite3.connect('people.db') as db:
                cursor = db.cursor()
                last_bonus = \
                    cursor.execute('SELECT last_bonus_date FROM users WHERE user_id = ?', (user_id,)).fetchone()[0]
                last_bonus_date = datetime.strptime(last_bonus, "%Y-%m-%d %H:%M:%S")
                next_bonus_date = last_bonus_date + timedelta(hours=72)  # 72 - 3 –¥–Ω—è | 24 - 1 –¥–µ–Ω—å
                time_left = next_bonus_date - datetime.now()

            hours, remainder = divmod(time_left.total_seconds(), 3600)
            minutes, _ = divmod(remainder, 60)
            bot.send_message(user_id,
                             f'<b>–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å. –°–ª–µ–¥—É—é—â–∏–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {int(hours)} —á–∞—Å–æ–≤ –∏ {int(minutes)} –º–∏–Ω—É—Ç.</b>')


if __name__ == '__main__':
    bot.infinity_polling()
